<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>武装带你</title>
    <link>https://peitianyu.github.io/pty_blog.github.io/</link>
    <description>Recent content on 武装带你</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hant</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Thu, 21 Oct 2021 16:20:39 +0800</lastBuildDate>
    
        <atom:link href="https://peitianyu.github.io/pty_blog.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>编程规范</title>
        <link>https://peitianyu.github.io/pty_blog.github.io/templete/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</link>
        <pubDate>Fri, 15 Oct 2021 16:20:39 +0800</pubDate>
        
        <guid>https://peitianyu.github.io/pty_blog.github.io/templete/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</guid>
        <description>武装带你 https://peitianyu.github.io/pty_blog.github.io/templete/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/ -&lt;h1 id=&#34;编程规范&#34;&gt;编程规范&lt;/h1&gt;
&lt;h3 id=&#34;规范&#34;&gt;规范&lt;/h3&gt;
&lt;h4 id=&#34;1-原则&#34;&gt;1. 原则&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;简洁明了，提高代码可读性，读的是代码而不是注释，注释永远都是辅助的。&lt;/li&gt;
&lt;li&gt;零告警，严谨的语法才能保障代码表达和编译器理解的是一至的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-排版&#34;&gt;2. 排版&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;程序块之间、变量声明之间，用空行分隔&lt;/li&gt;
&lt;li&gt;突出语法关键字&lt;/li&gt;
&lt;li&gt;一行不要太长，换行增加可读性&lt;/li&gt;
&lt;li&gt;Tab键排版&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;3-注释&#34;&gt;3. 注释&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;注释的目的是阐明意图目的，而不是翻译某行代码的动作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释的原则是尽量代码自注释，代码越清晰，可读性越高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一格式 &lt;em&gt;&lt;em&gt;/&lt;/em&gt; 注释内容 */&lt;/em&gt;*， *号与注释内容之间有一个空格&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*************************************************
Copyright 	 //版权
File name:	 // 文件名
Author： 	//作者
Version: 	 //版本号
Description: // 用于详细说明此程序文件完成的主要功能，与其他模块
         // 或函数的接口，输出值、取值范围、含义及参数间的控
         // 制、顺序、独立或依赖等关系
Others: 	// 其它内容的说明
Log: 		// 修改日志，包括修改内容，日期，修改人等
*************************************************/
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/*
*@ Description: 函数描述，描述本函数的基本功能
* @param 1 – 参数 1.
* @param 2 – 参数 2
* @return – 返回值
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;4-定义&#34;&gt;4. 定义&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;命名风格&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模块名+文件名+功能描述，之间采用短下划线分隔&lt;/li&gt;
&lt;li&gt;功能描述部分，采用驼峰风格&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;SAFE_LASER_setLaserShield&lt;/span&gt;(uint8_t _EN);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宏定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;define 必须大写&lt;/li&gt;
&lt;li&gt;typedef 可以小写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define OS_TASK_R200RXID1 		0x198 	&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* HEX格式 */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; uint32_t StackSize_t&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;；&lt;/span&gt;   		&lt;span style=&#34;color:#228b22&#34;&gt;/* 仅用于堆栈 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类型定义&lt;/p&gt;
&lt;p&gt;使用linux自带类型定义规则&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define uint8_t  	unsigned char
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define int8_t   	char
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define uint16_t 	unsigned short
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define int16_t  	short
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define uint32_t 	unsigned int
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define int32_t  	int
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define uint64_t 	unsigned long long
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define int64_t  	long long
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;   
&lt;span style=&#34;color:#1e889b&#34;&gt;#define TRUE  		1
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define FALSE 		0
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define NULL  		0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;5-变量&#34;&gt;5. 变量&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;变量通用规则
&lt;ol&gt;
&lt;li&gt;采用驼峰风格,首字母大写&lt;/li&gt;
&lt;li&gt;在函数开始是全部定义，不允许在函数中间定义&lt;/li&gt;
&lt;li&gt;变量命名必须可以表示其含义&lt;/li&gt;
&lt;li&gt;必须初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;局部变量
&lt;ol&gt;
&lt;li&gt;本地局部变量必须用static关键字修饰&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;全局变量
&lt;ol&gt;
&lt;li&gt;全局变量必须以g开头&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;函数变量
&lt;ol&gt;
&lt;li&gt;变量必须以_开头&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;static uint8_t SafeLaserSet = 0;
uint8_t gSafeLaserSet = 0;
static uint8_t _SafeLaserSet = 0;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;6-函数&#34;&gt;6. 函数&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;函数名必须能够自注释，必要是需要增加注释写明意图&lt;/li&gt;
&lt;li&gt;内部函数必须使用static定义，命名可以不加模块名&lt;/li&gt;
&lt;li&gt;外部函数
&lt;ol&gt;
&lt;li&gt;必须在头文件中声明，&lt;/li&gt;
&lt;li&gt;命名时必须带模块名，&lt;/li&gt;
&lt;li&gt;必须给出带注释，并写明函数意图，参数说明，返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;static uint_t SAFE_LASER_setLaseShield(uint8_t _EN);
void SAFE_LASER_setLaseShield(uint8_t _EN);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;7-文件&#34;&gt;7. 文件&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;头文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;命名规则模块名+功能，小写，例如os_task.h&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;格式如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#ifndef __OS_TASK_H__
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#define __OS_TASK_H__
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;      
....&lt;span style=&#34;color:#228b22&#34;&gt;/* 开放的宏定义 */&lt;/span&gt;
....&lt;span style=&#34;color:#228b22&#34;&gt;/* 开放的全局变量声明 */&lt;/span&gt;
....&lt;span style=&#34;color:#228b22&#34;&gt;/* 开放的函数声明 */&lt;/span&gt;
      
&lt;span style=&#34;color:#1e889b&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;命名规则模块名+功能，小写，例如os_task.c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;格式如下，举例只为说明源文件中，各元素的顺序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&amp;lt;- &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; - &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;引用头文件&lt;/span&gt; -&amp;gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;#34;os_task.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;      
&amp;lt;- &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; - &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;定义本文件用到的宏&lt;/span&gt; -&amp;gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;#define OS_TASK_SWITCH_INTERVAL 10 	&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/* 单位ms */&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; uint32_t StackSize_t &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;；&lt;/span&gt; 	 	&lt;span style=&#34;color:#228b22&#34;&gt;/* 仅用于堆栈 */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt;{};
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;union&lt;/span&gt;{};
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;{};
      
&amp;lt;- &lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt; - &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;本地变量&lt;/span&gt; -&amp;gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; StackSize_t *TopStack = &lt;span style=&#34;color:#658b00&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;；&lt;/span&gt;
      
&amp;lt;- &lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt; - &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;开放的全局变量&lt;/span&gt; -&amp;gt;
uint32_t gOsTaskEventBitMap = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; 
      
&amp;lt;- &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt; - &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;本地函数，仅在本文件使用&lt;/span&gt; -&amp;gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; TASK_TaskSwitch(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt;)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;；&lt;/span&gt;
}
      
&amp;lt;- &lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt; - &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;开放的函数&lt;/span&gt; -&amp;gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; OS_TASK_TaskDelay(uint16_t _ms)
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;；&lt;/span&gt;   
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;8约定俗成简写&#34;&gt;8.约定俗成简写&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;addition           	add           		加
subtraction 		sub              	减
multiplication 		mul           		乘法
division          	div             	除法
answer            	ans           		响应、回答
array               arr             	数组、集合
average          	avg            		平均
buffer              buf或buff   			缓冲区
capture           	cap或capt  			捕获
check              	chk            		检查
count              	cnt            		计数器
column            	col            		列
control            	ctrl            	控制
decode           	dec           		解码、译码
define             	def           		定义
delete             	del           		删除
destination     	dst或dest 			目的
display           	disp          		显示
encode          	enc            		编码
environment  		env           		环境
error              	err             	错误
float               flt              	浮动、浮点
frequency      		freq           		频率
header          	hdr            		开始、开头
index             	idx            		索引、指示、
image            	img           		影像、镜像
increment      		inc            		增加、增量
initalize         	init            	初始化
iteration        	itr             	循环、迭代
length           	len            		长度
memory        		mem          		内存
middle           	mid           		中值
make             	mk            		制造、形成
message       		msg          		消息
number         		num         	 	数量、编号
operand        		opnd        		操作数
optimization  		opt           		最优
operator       		optr          		操作
packet          	pkt            		消息包
positon         	pos           		位置
previous       		pre或prev  			以前的
pointer         	ptr             	指针
record          	rcd             	记录
receive         	recv           		收到、接收
result           	res             	结果
return          	ret              	返回
source         		src              	源头
stack           	stk              	栈
string          	str               	字符串
table           	tab              	表
temporary   		tmp或temp  			临时
total            	tot               	全部的
time stamp  		ts                	时间戳
value           	val              	值
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有互斥意义的变量或者动作相反的函数应该是用互斥词组命名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add/remove  	begin/end 		create/destroy 		insert/delete 
first/last 		get/release 	increment/decrement put/get 		add/delete
lock/unlock 	open/close 		min/max 			old/new 
start/stop 		next/previous 	source/target 		show/hide 
send/receive 	source/destination 					copy/paste 		up/down
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;9-模块&#34;&gt;9. 模块&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;模块必须具有封装性，且对外提供尽量少的必要接口，接口必须提供详细的注释描述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模块的组织形式可以是文件夹形式，也可以是文件形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件都以小写命名&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;.
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; src &lt;span style=&#34;color:#228b22&#34;&gt;/* 应用层代码 */&lt;/span&gt;
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; main.c &lt;span style=&#34;color:#228b22&#34;&gt;/* 应用入口 */&lt;/span&gt;
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; test.c
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; test1.c  
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; include &lt;span style=&#34;color:#228b22&#34;&gt;/* 设备驱动代码 */&lt;/span&gt;
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; test.h
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; test1.h 
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; debug &lt;span style=&#34;color:#228b22&#34;&gt;/* 芯片厂家提供的库代码 */&lt;/span&gt;
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; MakeFile
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;├──&lt;/span&gt; CMake
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;└──&lt;/span&gt; main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://peitianyu.github.io/pty_blog.github.io/templete/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>ROS_安装</title>
        <link>https://peitianyu.github.io/pty_blog.github.io/ros/ros%E5%AE%89%E8%A3%85/</link>
        <pubDate>Tue, 12 Oct 2021 16:20:39 +0800</pubDate>
        
        <guid>https://peitianyu.github.io/pty_blog.github.io/ros/ros%E5%AE%89%E8%A3%85/</guid>
        <description>武装带你 https://peitianyu.github.io/pty_blog.github.io/ros/ros%E5%AE%89%E8%A3%85/ -&lt;h3 id=&#34;安装环境&#34;&gt;安装环境&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Ubuntu18.04
ros-melodic-desktop-full
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim /etc/apt/sources.list.d/ros-latest.list
deb https://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ bionic main
sudo apt-key adv --keyserver &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;hkp://keyserver.ubuntu.com:80&amp;#39;&lt;/span&gt; --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
sudo apt update
sudo apt-get install ros-melodic-desktop-full
&lt;span style=&#34;color:#228b22&#34;&gt;# 初始化&lt;/span&gt;
sudo rosdep init
rosdep update
sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential
sudo &lt;span style=&#34;color:#658b00&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;source /opt/ros/melodic/setup.bash&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
&lt;span style=&#34;color:#658b00&#34;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;一行代码安装ros包含问题处理&#34;&gt;一行代码安装ros（包含问题处理）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget http://fishros.com/install -O fishros &amp;amp;&amp;amp; sudo bash fishros
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考视频：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/8hTrKL0N5y9i6s9ujhp0UA&#34;&gt;玩着游戏听着歌，就把ROS装好了！一行代码搞定系列！ (qq.com)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装问题&#34;&gt;安装问题&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rosdep init&lt;/code&gt;不成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;F35T1IRK7GMOWQDIHN_L8.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /etc
sudo mkdir ros
cd ros
sudo mkdir rosdep
cd rosdep
sudo mkdir source.list.d
cd source.list.d
sudo touch 20-default.list
sudo vim 20-default.list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#os-specific listings first
yaml https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/osx-homebrew.yaml osx
 
#generic
yaml https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/base.yaml
yaml https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml
yaml https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/ruby.yaml
gbpdistro https://raw.githubusercontent.com/ros/rosdistro/master/releases/fuerte.yaml fuerte
 
#newer distributions (Groovy, Hydro, …) must not be listed anymore, they are being 
#fetched from the rosdistro index.yaml instead
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;rosdep update&lt;/code&gt;问题&lt;/p&gt;
&lt;p&gt;首先调大执行时间，更改 &lt;code&gt;/usr/lib/python2.7/dist-packages/rosdep2/&lt;/code&gt;下的三个文件&lt;code&gt;sources_list.py&lt;/code&gt;、&lt;code&gt;gbpdistro_support.py&lt;/code&gt;、&lt;code&gt;rep3.py&lt;/code&gt;中的&lt;code&gt;DOWNLOAD_TIMEOUT = 15.0&lt;/code&gt;值，我一般直接改成999。  终端输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /usr/lib/python2.7/dist-packages/rosdep2/gbpdistro_support.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改&lt;code&gt;DOWNLOAD_TIMEOUT&lt;/code&gt;后，输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在最后一行加入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;151.101.84.133  raw.githubusercontent.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;连上&lt;strong&gt;手机热点&lt;/strong&gt;，重新&lt;code&gt;rosdep update&lt;/code&gt;多次后，成功。&lt;/p&gt;
&lt;h3 id=&#34;卸载&#34;&gt;卸载&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get autoremove --purge ros-melodic
&lt;span style=&#34;color:#228b22&#34;&gt;# 先卸载包&lt;/span&gt;
sudo apt-get purge ros-*
&lt;span style=&#34;color:#228b22&#34;&gt;# 然后删除依赖，配置&lt;/span&gt;
sudo apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir -p ~/catkin_ws/src
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; ~/catkin_ws/
catkin_make
&lt;span style=&#34;color:#658b00&#34;&gt;source&lt;/span&gt; devel/setup.bash
roscore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开新窗口执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rosrun turtlesim turtlesim_node
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现小乌龟则安装完成。&lt;/p&gt;
- https://peitianyu.github.io/pty_blog.github.io/ros/ros%E5%AE%89%E8%A3%85/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>HUGO_blog教程</title>
        <link>https://peitianyu.github.io/pty_blog.github.io/templete/hugo_blog%E6%95%99%E7%A8%8B/</link>
        <pubDate>Tue, 12 Oct 2021 10:49:31 +0800</pubDate>
        
        <guid>https://peitianyu.github.io/pty_blog.github.io/templete/hugo_blog%E6%95%99%E7%A8%8B/</guid>
        <description>武装带你 https://peitianyu.github.io/pty_blog.github.io/templete/hugo_blog%E6%95%99%E7%A8%8B/ -&lt;h3 id=&#34;git安装与配置&#34;&gt;git安装与配置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# git安装&lt;/span&gt;
sudo apt update
sudo apt install git 
&lt;span style=&#34;color:#228b22&#34;&gt;#git配置&lt;/span&gt;
git config --global user.name &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;zoey&amp;#34;&lt;/span&gt;
git config --global user.email &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;zoey686@163.com&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;#查看设置用户名与密码&lt;/span&gt;
git config --list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;hugo安装&#34;&gt;hugo安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 安装&lt;/span&gt;
sudo apt install hugo
&lt;span style=&#34;color:#228b22&#34;&gt;# 手动安装&lt;/span&gt;
wget https://github.com/gohugoio/hugo/releases/download/v0.54.0/hugo_0.54.0_Linux-64bit.deb
sudo dpkg -i hugo_0.54.0_Linux-64bit.deb
&lt;span style=&#34;color:#228b22&#34;&gt;# 查看&lt;/span&gt;
hugo --help
hugo version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;建立博客&#34;&gt;建立博客&lt;/h4&gt;
&lt;p&gt;新建git文件夹用以git模板等，并在文件夹下新建myblog，用来存放博客页面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 新建git文件夹并git初始化&lt;/span&gt;
mkdir gitFile  
git init
&lt;span style=&#34;color:#228b22&#34;&gt;# 新建myblog文件夹用来存放博客页面&lt;/span&gt;
hugo new site myblog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;myblog下面就会有以下几个文件夹自动生成&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;文件夹名&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;archetypes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;文章开头形式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;content&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;data&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;自定义模板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;layouts&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;网页模板文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;static&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;存储图片一些其他的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;themes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;主题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;config.toml&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;设置主题&#34;&gt;设置主题&lt;/h4&gt;
&lt;p&gt;在（https://themes.gohugo.io/）中挑选主题,这里选择的是diary主题（&lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-diary/&#34;&gt;Diary | Hugo Themes (gohugo.io)&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;例子：（&lt;a href=&#34;https://sunua.gitee.io/simonblog/&#34;&gt;浅蓝色 (gitee.io)&lt;/a&gt;）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 下载diary主题到themes文件夹下并重命名为diary&lt;/span&gt;
git submodule add https://github.com/AmazingRise/hugo-theme-diary.git themes/diary
&lt;span style=&#34;color:#228b22&#34;&gt;# 配置config.toml文件&lt;/span&gt;
nano config.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;baseURL = &amp;quot;https://peitianyu.github.io/pty_blog.github.io&amp;quot;
DefaultContentLanguage = &amp;quot;zh&amp;quot; # Theme&#39;s display language, supports: en, fr, zh, zh-hant
languageCode = &amp;quot;zh-hant&amp;quot;
title = &amp;quot;武装带你&amp;quot;
copyright = &amp;quot;This is a customized copyright.&amp;quot;
theme = &amp;quot;diary&amp;quot;

[markup]
  [markup.highlight]
    codeFences = true
    guessSyntax = false
    hl_Lines = &amp;quot;&amp;quot;
    lineNoStart = 1
    lineNos = false
    lineNumbersInTable = true
    noClasses = true
    style = &amp;quot;perldoc&amp;quot;
    tabWidth = 4


enableOpenGraph = true
enableTwitterCards = true
title = &amp;quot;My Blog&amp;quot; 
description = &amp;quot;My HomePage Description&amp;quot;  

[taxonomies]
   ros = &amp;quot;Ros&amp;quot;
   blog = &amp;quot;Blog&amp;quot;

[[menu.main]]
url = &amp;quot;/blog&amp;quot;
name = &amp;quot;Blog&amp;quot;
weight = 1
[[menu.main]]
url = &amp;quot;/ros&amp;quot;
name = &amp;quot;Ros&amp;quot;
weight = 2
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;创建文章&#34;&gt;创建文章&lt;/h4&gt;
&lt;p&gt;默认主目录文章在content/post下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 创建文章
hugo new post/my_first_blog.md
#创建文章在需要目录(Archive)下
hugo new posts/my_first_blog.md
cd content/post
nano my_first_blog.md
# 注意将draft参数改为false，否则跳过草稿文件，无法预览
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;my_first_blog&amp;quot;
date: 2021-10-12T10:49:31+08:00
draft : false
---
文本内容
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本地调试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server --theme=blackburn --buildDrafts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 &amp;ndash;theme 选项可以指定主题，–buildDrafts 包括标记为草稿
然后在浏览器里打开： &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313&lt;/a&gt; 即可访问到你的博客&lt;/p&gt;
&lt;h4 id=&#34;部署到github&#34;&gt;部署到github&lt;/h4&gt;
&lt;p&gt;如果你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：&lt;code&gt;pty_blog.github.io&lt;/code&gt; （&lt;strong&gt;pty_blog替换为你的github用户名的小写&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;进入仓库，点击&lt;strong&gt;Settings&lt;/strong&gt;进入，找到&lt;strong&gt;GitHub Pages&lt;/strong&gt;并点击&lt;strong&gt;Check it out here!&lt;/strong&gt;，配置&lt;strong&gt;Source&lt;/strong&gt;并&lt;strong&gt;save&lt;/strong&gt;，会发现绿色框中显现 &lt;code&gt;Your site is published at https://peitianyu.github.io/pty_blog.github.io/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此处https://peitianyu.github.io/pty_blog.github.io/就是我们的网址，也是config.toml文件中设置的网址，设置hugo登陆网址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo --theme=diary --buildDrafts --baseUrl=&amp;quot;https://peitianyu.github.io/pty_blog.github.io/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这里的 &amp;ndash;baseUrl 一定是https://（Hugo中文文档里为http://），不然你部署后的博客会没有样式！&lt;/p&gt;
&lt;p&gt;可看到根目录下多出 /public文件夹出来，该文件夹的内容即Hugo生成的整个静态网站。然后继续在你的站点根目录执行git 命令，添加远程仓库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; public
git init
git remote add origin git@github.com:peitianyu/pty_blog.github.io.git
git add -A
git commit -m “first commit”
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后浏览器里访问：https://peitianyu.github.io/pty_blog.github.io/即可看到刚刚搭建的博客。&lt;/p&gt;
&lt;p&gt;发布博客并更新：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 新建博客markdown文件，并编辑博客内容(文件名为 **.md )
hugo new post/newBlog.md
# 生成静态页面
hugo --theme=diary --buildDrafts --baseUrl=&amp;quot;https://peitianyu.github.io/pty_blog.github.io/&amp;quot;
# 发布
cd public
git add .
git commit -m &amp;quot;new blog added&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;- https://peitianyu.github.io/pty_blog.github.io/templete/hugo_blog%E6%95%99%E7%A8%8B/ - This is a customized copyright.</description>
        </item>
    
    
  </channel>
</rss> 